stages:
    - lint
    - test
    - security-report
    - build
    - deploy

lint-html:
    stage: lint
    tags: 
        - docker
    image: node
    script:
        - npm install htmlhint
        - npx htmlhint '**/*.html' > linthtml_report.txt
    artifacts:
        when: always
        paths:
        - linthtml_report.txt

lint-css:
    stage: lint
    tags: 
        - docker
    image: node
    script:
        - npm install stylelint stylelint-config-standard
        - npx stylelint '**/*.css' > lintcss_report.txt
    artifacts:
        when: always
        paths:
        - lintcss_report.txt

lint-js:
    stage: lint
    tags:
      - docker
    image: node
    script:
      - npm install eslint@8 eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-react-refresh
      - npx eslint --config .eslintrc.js --ignore-pattern '**/*api.user.test.js' --ignore-pattern '*/cypress/*' --ignore-pattern '**/*cypress.config.js' '**/*.js' > lintes_report.txt
    artifacts:
      when: always
      paths:
        - lintes_report.txt

super-test:
    stage: test
    image: node
    script:
        - cd backend && npm install && cd ..
        - cd backend && npm run test > test_report.txt
    tags:
        - docker
    artifacts:
        when: always
        paths:
          - backend/test_report.txt

jobcypress:
  stage: test
  tags:
    - docker  # Comme on utilise une image pour isoler on doit utiliser un runner docker 
  image: cypress/base:16.18.1 # Image fournie par cypress avec ce qu'il faut
  script:
    - cd frontend
    - npm install # Installe ce qui est décrit dans package.json
    - npm run dev & # Lance le serveur
    - npx cypress run > frontend_test_report.txt # Lance les tests
  artifacts:
      when: always
      paths:
        - frontend/frontend_test_report.txt

semgrep-security-report:
  stage: security-report
  image: returntocorp/semgrep
  script:
    - apk add gawk
    - pip3 install anybadge
    # Voir https://semgrep.dev/r pour la sélection des types d'analyse
    - 'semgrep --config "p/default" --config  "r/javascript" --config  "r/html" --config "r/css" --gitlab-sast -o gl-sast-semgrep-report.json  .'
    - BADGES="javascript html dockerfile"
    # et https://github.com/returntocorp/semgrep-rules/tree/develop
    - 'for b in $BADGES; do semgrep --config "r/${b}" -o "semgrep_${b}.report.txt" .;done'
    - "for b in $BADGES; do SCORE=$(gawk 'match($0,/([0-9]+) Code Finding/,a){print a[1]}' semgrep_${b}.report.txt);echo $SCORE;anybadge -l $b -v _${SCORE} > $b.badge.svg;done"
  allow_failure: true
  artifacts:
    reports:
      sast: gl-sast-semgrep-report.json
    paths:
      - "*.report.txt"
      - "*.badge.svg"
      - gl-sast-semgrep-report.json

pages: # Job de mise en ligne du frontend de production sur les pages du projet
  stage: deploy
  image: node
  script:
    - mkdir public # Création du répertoire du frontend de production
    - cd frontend  # On se place dans le répertoire des sources du frontend
    - npm i # On installe les paquets nécessaires
    - npm run build # Et on génère les fichiers de production
    - cp -rf dist/* ../public/ # Qui sont copiés dans le répertoire dédié
  artifacts: # On précise que le répertoire des pages doit être conservé une fois le job terminé
    paths:
      - public

# Job pour exposer l'API sur Scalingo
# URL d'exposition de l'API : https://projet-web.osc-fr1.scalingo.io/
scalingo:
  stage: deploy
  tags:
    - docker
  variables:
    # SCALINGO_API_TOKEN # variable à ne pas définir en clair ici (cf instructions à la fin du .gitlab-ci.yml ci-dessous)
    SCALINGO_APP_NAME: projet-web # le nom de votre appli chez scalingo (A ADAPTER)
    SCALINGO_REGION: osc-fr1 # l'instance de scalingo sur laquelle votre appli est déployée
    GIT_DEPTH: 0
    PROJECT_DIR: backend # Le répertoire dans le dépôt où est le backend
  image: ruby:3.1.3 # car dpl est codé en Ruby
  script:
    # Installer scalingo CLI
    - curl -O https://cli-dl.scalingo.com/install && bash install
    # Pour indiquer sur le dépôt distant où est le backend 
    # (s'il est à la racine du projet ceci est facultatif, et il est possible de le faire une fois pour toute directement dans l'interface web de scalingo)
    - scalingo --app=$SCALINGO_APP_NAME env-set PROJECT_DIR=$PROJECT_DIR 
    # Se connecter à scalingo avec le token d'authentification
    - scalingo login --api-token $SCALINGO_API_TOKEN
    # Créer une paire de clé ssh pour faire les manips git sur le dépôt scalingo
    - mkdir -p ~/.dpl
    - ssh-keygen -t rsa -N "" -C $HOSTNAME -f ~/.dpl/id_rsa
    # Ajouter à scalingo la clé publique créée précédemment
    - scalingo keys-remove dpl_tmp_key || echo "On la supprime au préalable au cas où elle aurait déjà été ajoutée"
    - scalingo keys-add dpl_tmp_key ~/.dpl/id_rsa.pub
    # Initialiser le dépôt scalingo distant (en forçant si ce n'est pas le première fois)
    - scalingo --app $SCALINGO_APP_NAME git-setup --remote scalingo-dpl --force
    - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash # Installation de nvm
    - export NVM_DIR="$HOME/.nvm"
    - \. "$NVM_DIR/nvm.sh"  
    - \. "$NVM_DIR/bash_completion"
    - nvm install node # Installe la dernière version de node
    - nvm use node
    - cd frontend # On se place dans le répertoire des sources du frontend
    - npm i && npm run build && cp -rf dist/* ../backend/src/frontend # Pour générer la version de production du frontend
    - git config --global user.email "$GITLAB_USER_EMAIL" # Configure git pour pouvoir pousser la version de production du frontend sur le dépot git de scalingo
    - git config --global user.name "$GITLAB_USER_NAME"
    - cd ../backend/src/frontend && git add . && git commit -m "MAJ frontend" # Ajoute les fichiers de production du frontend
    # Pousser la version du backend sur le dépôt scalingo (ce qui va provoquer son déploiement)
    - "GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -i ~/.dpl/id_rsa' git push scalingo-dpl HEAD:refs/heads/main -f"
    # Supprimer la clé temporaire ajoutée
    - scalingo keys-remove dpl_tmp_key || echo Suppression
 # la variable SCALINGO_API_TOKEN contient le token que vous avez généré chez scalingo via le menu `User Settings > API tokens`
 #
 # Afin que la variable SCALINGO_API_TOKEN n'apparaissent pas en clair sur notre dépôt public gitlab, on définit cette variable via 
 # le menu `Settings > CI/CD > Variables` et on la masque dans le résultat des logs des jobs en lui appliquant la propriété "Masked"
 # Plus de détails sur https://docs.gitlab.com/ee/ci/variables/index.html.

badges:
    stage: deploy
    image: python:3.9
    script:
        - pip install anybadge
        - chmod +x generateBadges.sh
        - ./generateBadges.sh
    dependencies:
        - lint-html
        - lint-css
        - lint-js
    artifacts:
        paths:
            - linthtml.svg
            - lintcss.svg
            - lintes.svg
    when: always
